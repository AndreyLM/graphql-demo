type User {
    id: ID!
    name: String!
    email: String!
    videos(limit: Int = 10, offset: Int = 0):[Video!]!
}

type Video {
    id: ID!
    name: String!
    description: String!
    user: User!
    url: String!
    createdAt: Timestamp!
    screenshots: [Screenshot]
    related(limit: Int = 25, offset: Int = 0):[Video!]!
}

type Screenshot {
    id: ID!
    videoId: ID!
    url: String!
}

input NewVideo {
    name: String!
    description: String!
    userId: ID!
    url: String!
}

input NewUser {
    name: String!
    email: String!
}

input VideoRelation {
    firstId: ID!
    secondId: ID!
}

type Mutation {
    createUser(input: NewUser!): User!
    createVideo(input: NewVideo!): Video! @isAuthenticated
    addVideoRelation(input: VideoRelation!): Boolean!
    removeUser(input: ID!): Boolean! @hasRole(role: ADMIN)
    removeVideoRelation(input: VideoRelation!): Boolean!
    removeVideo(input: ID!): Boolean!
}

type Query {
    Videos(limit: Int = 10, offset: Int = 0): [Video!]!
    Users(limit: Int = 10, offset: Int = 0): [User!]!
}

type Subscription {
    videoPublished: Video!
}

scalar Timestamp
enum Role {
    ADMIN
    USER
}

directive @isAuthenticated on FIELD_DEFINITION
directive @hasRole(role: Role!) on FIELD_DEFINITION